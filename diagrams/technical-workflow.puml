@startuml technical-workflow
start
repeat
if (incoming request?) then (yes)
    if (request is valid?) then (yes)
        :fetch properties from the MergeRequestEvent object;
        if (merge-request action?) then (MERGE)
            :try to read nextMainBranch from configuration file;
            if (nextMainBranch is configured?) then (yes)
                if (nextMainBranch exists remotely?) then (yes)
                    :create new branch from targetBranch;
                    :create new MR from the new branch into the nextMainBranch;
                    if (apiTokenApprover is set?) then (yes)
                        :approve the just created MR as that user (apiTokenApprover);
                    else (no)
                    endif
                    #SkyBlue:initialize countDown from 60;
                    note right 
                        Timeout to avoid the possibility
                        of getting stuck in the loop forever
                    end note
                    while(MRStatus == unchecked|checking and countdown > 0?) is (yes)
                        #SkyBlue:decrement countDown by 1;
                        :sleep 1s;
                        note right: Wait for Gitlab to prepare MR
                        :update MRStatus from Gitlab;
                    endwhile (no)
                    if (countDown == 0) then (yes) 
                        :error;
                    else (no)
                        switch(Is MRStatus == mergeable|ci_still_running|ci_must_pass|status_checks_must_pass?)
                        case (yes)
                            if (MR has pipeline(s)?) then (yes)
                                :merge when pipeline succeeds;
                            else (no)
                                :merge immediately;
                            endif
                        case (no)
                            while(MR merger) is (ucascade user)
                                :get user that merged the preceding MR;
                            endwhile (not the ucascade user)
                            :update MR to set its assignees to the MR assignees and merger;
                        endswitch
                    endif
                else (no)
                    #red:discard with error;
                endif
                else (no)
                    :nothing to do;
            endif
        else (CLOSE)
            :delete MR source branch;
            if (concurrent open auto MR(s) exist?) then (yes)
                if (oldest one has conflicts?) then (yes)
                    :sleep 5s;
                endif
                :merge oldest concurrent MR;
            endif
        endif
    endif
endif
repeat while
@enduml